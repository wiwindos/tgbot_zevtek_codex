# bot/main.py
import argparse
import asyncio
import os

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from dotenv import load_dotenv

from bot.admin import get_admin_router
from bot.context_middleware import ContextMiddleware
from bot.conversation import get_conversation_router
from bot.file_handlers import get_file_router
from bot.middleware import AuthMiddleware
from bot.utils import send_long_message
from scheduler.runner import configure, scheduler
from services.context import ContextBuffer

BOT_TOKEN = os.getenv("BOT_TOKEN")


async def start_handler(msg: types.Message):
    await send_long_message(
        msg.bot,
        msg.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –±–æ—Ç üêç",
    )


HELP_TEXT = """\
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏
"""

ADMIN_HELP = """\
/admin stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/admin users pending ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
/admin disable <id> ‚Äî –∑–∞–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø
/admin enable <id> ‚Äî –≤–µ—Ä–Ω—É—Ç—å –¥–æ—Å—Ç—É–ø
/admin models ‚Äî —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
/admin refresh models ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª–∏
"""


async def help_handler(msg: types.Message):
    text = HELP_TEXT
    admin_id = int(os.getenv("ADMIN_CHAT_ID", "0"))
    if msg.from_user.id == admin_id:
        text += "\n" + ADMIN_HELP
    await send_long_message(msg.bot, msg.chat.id, text)


async def ping_handler(msg: types.Message):
    await send_long_message(msg.bot, msg.chat.id, "Bot ready")


def create_bot_and_dispatcher():  # —É–¥–æ–±–Ω–æ —Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–∞—Ö
    token = os.getenv("BOT_TOKEN")
    admin_id = int(os.getenv("ADMIN_CHAT_ID", "0"))
    max_ctx = int(os.getenv("MAX_CONTEXT_MESSAGES", "20"))
    bot = Bot(token=token)
    dp = Dispatcher()
    buffer = ContextBuffer(max_messages=max_ctx)
    bot.context_buffer = buffer
    dp.context_buffer = buffer
    dp.message.outer_middleware(ContextMiddleware(buffer))
    dp.message.middleware(AuthMiddleware(admin_id))
    dp.include_router(get_admin_router(admin_id))
    dp.include_router(get_file_router())
    dp.include_router(get_conversation_router(buffer))
    dp.message(Command("start"))(start_handler)
    dp.message(Command("help"))(help_handler)
    dp.message(Command("ping"))(ping_handler)
    if os.getenv("ENABLE_SCHEDULER", "1") == "1":
        configure()
        scheduler.start()
    return bot, dp


async def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--ping", action="store_true", help="health check")
    args = parser.parse_args()

    if args.ping:
        load_dotenv()
        print("pong")
        return 0

    bot, dp = create_bot_and_dispatcher()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
